{"version":3,"file":"static/js/290.b3298518.chunk.js","mappings":"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","sources":["common/Button/styles.ts","common/Button/index.tsx","components/ContentBlock/styles.ts","components/ContentBlock/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledButton = styled(\"button\")<{ color?: string }>`\r\n  background: ${(p) => p.color || \"#000000\"};\r\n  color: ${(p) => (p.color ? \"#00FFFF\" : \"#fff\")};\r\n  font-size: 1rem;\r\n  font-weight: 700;\r\n  width: 100%;\r\n  border: 1px solid #edf3f5;\r\n  border-radius: 4px;\r\n  padding: 13px 0;\r\n  cursor: pointer;\r\n  margin-top: 0.625rem;\r\n  max-width: 180px;\r\n  transition: all 0.3s ease-in-out;\r\n  box-shadow: 0 16px 30px rgb(23 31 114 / 20%);\r\n\r\n  &:hover,\r\n  &:active,\r\n  &:focus {\r\n    color: #fff;\r\n    border: 1px solid rgb(0, 206, 209);\r\n    background-color: rgb(0, 206, 209);\r\n  }\r\n`;\r\n","import { StyledButton } from \"./styles\";\r\nimport { ButtonProps } from \"../types\";\r\n\r\nexport const Button = ({ color, children, onClick }: ButtonProps) => (\r\n  <StyledButton color={color} onClick={onClick}>\r\n    {children}\r\n  </StyledButton>\r\n);\r\n","import { Row } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const ContentSection = styled(\"section\")`\r\n  position: relative;\r\n  padding: 10rem 0 8rem;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 4rem 0 4rem;\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin: 1.5rem 0 2rem 0;\r\n`;\r\n\r\nexport const StyledRow = styled(Row)`\r\n  flex-direction: ${({ direction }: { direction: string }) =>\r\n    direction === \"left\" ? \"row\" : \"row-reverse\"};\r\n`;\r\n\r\nexport const ContentWrapper = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 540px;\r\n\r\n  @media only screen and (max-width: 575px) {\r\n    padding-top: 4rem;\r\n  }\r\n`;\r\n\r\nexport const ServiceWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n`;\r\n\r\nexport const MinTitle = styled(\"h6\")`\r\n  font-size: 15px;\r\n  line-height: 1rem;\r\n  padding: 0.5rem 0;\r\n  text-transform: uppercase;\r\n  color: #000;\r\n  font-family: \"Motiva Sans Light\", sans-serif;\r\n`;\r\n\r\nexport const MinPara = styled(\"p\")`\r\n  font-size: 13px;\r\n`;\r\n\r\nexport const ButtonWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n\r\n  @media screen and (min-width: 1024px) {\r\n    max-width: 80%;\r\n  }\r\n\r\n  button:last-child {\r\n    margin-left: 20px;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\nimport { useHistory } from 'react-router-dom';  // Import useHistory\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nimport { ContentBlockProps } from \"./types\";\r\nimport { Button } from \"../../common/Button\";\r\nimport { SvgIcon } from \"../../common/SvgIcon\";\r\nimport {\r\n  ContentSection,\r\n  Content,\r\n  ContentWrapper,\r\n  ServiceWrapper,\r\n  MinTitle,\r\n  MinPara,\r\n  StyledRow,\r\n  ButtonWrapper,\r\n} from \"./styles\";\r\n\r\nconst ContentBlock = ({\r\n  icon,\r\n  title,\r\n  content,\r\n  section,\r\n  button,\r\n  t,\r\n  id,\r\n  direction,\r\n}: ContentBlockProps) => {\r\n  const history = useHistory();  // Initialize useHistory\r\n\r\n  const handleNavigation = (path: string) => {\r\n    history.push(path);\r\n  };\r\n\r\n  return (\r\n    <ContentSection>\r\n      <Fade direction={direction} triggerOnce>\r\n        <StyledRow\r\n          justify=\"space-between\"\r\n          align=\"middle\"\r\n          id={id}\r\n          direction={direction}\r\n        >\r\n          <Col lg={11} md={11} sm={12} xs={24}>\r\n            <SvgIcon src={icon} width=\"100%\" height=\"100%\" />\r\n          </Col>\r\n          <Col lg={11} md={11} sm={11} xs={24}>\r\n            <ContentWrapper>\r\n              <h6>{t(title)}</h6>\r\n              <Content>{t(content)}</Content>\r\n              {direction === \"right\" && (\r\n                <ButtonWrapper>\r\n                  {button && button.map((item, index) => (\r\n                    <Button\r\n                      key={index}\r\n                      color={item.color}\r\n                      onClick={() => handleNavigation('/new-page')}  // Update navigation path\r\n                    >\r\n                      {t(item.title)}\r\n                    </Button>\r\n                  ))}\r\n                </ButtonWrapper>\r\n              )}\r\n            </ContentWrapper>\r\n          </Col>\r\n        </StyledRow>\r\n      </Fade>\r\n    </ContentSection>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(ContentBlock);\r\n"],"names":["StyledButton","styled","_templateObject","_taggedTemplateLiteral","p","color","Button","_ref","children","onClick","_jsx","ContentSection","Content","_templateObject2","StyledRow","Row","_templateObject3","direction","ContentWrapper","_templateObject4","ButtonWrapper","_templateObject5","_templateObject6","_templateObject7","_templateObject8","withTranslation","icon","title","content","button","section","t","id","history","useHistory","Fade","triggerOnce","_jsxs","justify","align","Col","lg","md","sm","xs","SvgIcon","src","width","height","map","item","index","path","push"],"sourceRoot":""}